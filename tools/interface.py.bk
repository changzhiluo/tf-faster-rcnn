#!/usr/bin/env python

# --------------------------------------------------------
# Tensorflow Faster R-CNN
# Licensed under The MIT License [see LICENSE for details]
# Written by Xinlei Chen, based on code from Ross Girshick
# --------------------------------------------------------

"""
Demo script showing detections in sample images.

See README.md for installation instructions before running.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import _init_paths
from model.config import cfg
from model.test import im_detect
from model.nms_wrapper import nms

from utils.timer import Timer
import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os, cv2
import argparse

from nets.vgg16 import vgg16
from nets.resnet_v1 import resnetv1

class Bird:
    def __init__(self): #类别名称和类别数目需要在这里定义
        class_name = ['__background__'] # 背景类，需要留着
        for line in open('./data/bird/CUB_200_2011/class_names.txt', 'r'):
            class_name.append(line[0:-2]) #行尾有多一个字符：‘\n’
        self.CLASS_NUM = len(class_name) - 1
        self.CLASSES = tuple(class_name) 
        self.NETWORKS = {'res101': 'res101_faster_rcnn_iter_100000.ckpt'}
        self.DATASETS= {'coco': 'coco_2014_train'}
        self.SESS = None
        self.NET = None
    
    # 初始化训练好的模型
    def load_model(self):
        cfg.TEST.HAS_RPN = True  # Use RPN for proposals
        # model path
        tfmodel = os.path.join('output', 'res101', self.DATASETS['coco'], 'default',
                                self.NETWORKS['res101'])
        # print('tfmodel is: ', tfmodel)
        if not os.path.isfile(tfmodel + '.meta'):
            raise IOError(('{:s} not found.\nDid you download the proper networks from '
                        'our server and place them properly?').format(tfmodel + '.meta'))
        # set config
        os.environ['CUDA_VISIBLE_DEVICES'] = '3'
        tfconfig = tf.ConfigProto(allow_soft_placement=True)
        # tfconfig.gpu_options.allow_growth=True
        tfconfig.gpu_options.allow_growth=False

        # init session
        sess = tf.Session(config=tfconfig)
        # load network
        net = resnetv1(num_layers=101)

        # net.create_architecture("TEST", self.CLASS_NUM + 1, tag='default', anchor_scales=[4, 8, 16, 32])
        net.create_architecture("TEST", self.CLASS_NUM + 1, tag='default', anchor_scales=[4,8,16,32])
        saver = tf.train.Saver()
        saver.restore(sess, tfmodel)
        self.SESS = sess
        self.NET = net

    # 后处理和展示
    def vis_detections(self, im, class_name, dets, thresh=0.5):
        """Draw detected bounding boxes."""
        inds = np.where(dets[:, -1] >= thresh)[0]
        if len(inds) == 0:
            return

        # 显示原图
        im = im[:, :, (2, 1, 0)]
        fig, ax = plt.subplots(figsize=(12, 12))
        ax.imshow(im, aspect='equal')


        for i in inds:
            bbox = dets[i, :4]
            score = dets[i, -1]

            ax.add_patch(
                plt.Rectangle((bbox[0], bbox[1]),
                            bbox[2] - bbox[0],
                            bbox[3] - bbox[1], fill=False,
                            edgecolor='red', linewidth=3.5)
                )
            ax.text(bbox[0], bbox[1] - 2,
                    '{:s} {:.3f}'.format(class_name, score),
                    bbox=dict(facecolor='blue', alpha=0.5),
                    fontsize=14, color='white')

        # ax.set_title(('{} detections with p({} | box) >= {:.1f}').format(class_name, class_name, thresh), fontsize=14)
        plt.axis('off')
        plt.tight_layout()
        plt.draw()

    # 预测函数
    def predict(self, sess, net, img_path, thresh = 0.8):
        # thresh表示需要展示概率大于多少的结果
        assert(thresh > 0 and thresh < 1)

        # Load the demo image
        im = cv2.imread(img_path)

        # Detect all object classes and regress object bounds
        timer = Timer()
        timer.tic()
        scores, boxes = im_detect(sess, net, im)
        timer.toc()
        print('Detection took {:.3f}s for {:d} object proposals'.format(timer.total_time, boxes.shape[0]))

        # 显示原图
        im = im[:, :, (2, 1, 0)]
        fig, ax = plt.subplots(figsize=(12, 12))
        ax.imshow(im, aspect='equal')

        # Visualize detections for each class
        CONF_THRESH = thresh
        NMS_THRESH = 0.3
        for cls_ind, cls in enumerate(self.CLASSES[1:]):
            cls_ind += 1 # because we skipped background
            cls_boxes = boxes[:, 4*cls_ind:4*(cls_ind + 1)]
            cls_scores = scores[:, cls_ind]
            dets = np.hstack((cls_boxes, cls_scores[:, np.newaxis])).astype(np.float32)
            keep = nms(dets, NMS_THRESH)
            dets = dets[keep, :]
            inds = np.where(dets[:, -1] >= CONF_THRESH)[0]
            if len(inds) == 0:
                continue
            for i in inds:
                bbox = dets[i, :4]
                score = dets[i, -1]
                ax.add_patch(
                    plt.Rectangle((bbox[0], bbox[1]),
                                bbox[2] - bbox[0],
                                bbox[3] - bbox[1], fill=False,
                                edgecolor='red', linewidth=3.5)
                    )
                ax.text(bbox[0], bbox[1] - 2,
                        '{:s} {:.3f}'.format(cls, score),
                        bbox=dict(facecolor='blue', alpha=0.5),
                        fontsize=14, color='white')
            plt.axis('off') # 不显示坐标
            plt.tight_layout() # 确保坐标里的文字能正常显示
            plt.draw()

if __name__ == '__main__':

    bird = Bird()
    bird.load_model() # 为了获取sess和net
    # img_path = '/home/luochangzhi/code//tf-faster-rcnn/data/demo/000542.jpg' # 测试图片
    img_path = '/home/luochangzhi/code/tf-faster-rcnn/data/demo/img1.jpg' # 测试图片, 只支持3通道的图片，特殊图片如1通道或者4通道的可以用opencv转换为3通道的。
    bird.predict(bird.SESS, bird.NET, img_path)
    plt.show()
